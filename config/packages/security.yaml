security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: Domain\Authentication\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            entry_point: Infrastructure\Authentication\Symfony\Security\AuthenticationEntryPoint
            user_checker: Infrastructure\Authentication\Symfony\Security\UserChecker
            custom_authenticator:
                - Infrastructure\Authentication\Symfony\Authenticator\LoginFormAuthenticator
                - Infrastructure\Authentication\Symfony\Authenticator\GoogleAuthenticator
                - Infrastructure\Authentication\Symfony\Authenticator\GithubAuthenticator
                - Infrastructure\Authentication\Symfony\Authenticator\FacebookAuthenticator

            # configure the maximum login attempts (per minute)
            #login_throttling:
                #max_attempts: 3

            form_login:
                post_only: true
                login_path: auth_login
                failure_path: auth_login
                username_parameter: identifier
                password_parameter: password
                csrf_parameter: _token

            login_link:
                check_route: auth_login_link_check
                signature_properties: [ id, email ]
                max_uses: 3
                lifetime: 600

            logout:
                invalidate_session: true
                path: auth_logout
                target: auth_login

            remember_me:
                secret: "%kernel.secret%"
                lifetime: 604800 # 1 week in seconds
                path: /
                samesite: strict

            # https://symfony.com/doc/current/security/impersonating_user.html
            switch_user: { role: ROLE_ADMIN, parameter: _control }

            two_factor:
                auth_form_path: auth_2fa_login
                check_path: auth_2fa_check
                post_only: true
                default_target_path: /
                always_use_default_target_path: false
                auth_code_parameter_name: _code
                trusted_parameter_name: _trusted
                remember_me_sets_trusted: false
                multi_factor: false
                success_handler: ~
                failure_handler: ~

                # Use a custom authentication required handler instead of the default one
                # This can be used to modify the default behavior of the bundle, which is always redirecting to the
                # two-factor authentication form, when two-factor authentication is required.
                authentication_required_handler: ~

                # Some two-factor providers need to be "prepared", usually a code is generated and sent to the user. Per
                # default, this happens when the two-factor form is shown. But you may want to execute preparation
                # earlier in the user's journey.
                prepare_on_login: false
                prepare_on_access_denied: false

                enable_csrf: true
                csrf_parameter: _token
                csrf_token_id: 2fa

                # If you have multiple user providers registered, Symfony's security extension requires you to configure
                # a user provider. You're forced to configure this node, although it doesn't have any effect on the
                # TwoFactorBundle. So set this to any of your user providers, it doesn't matter which one.
                provider: app_user_provider

    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
        ROLE_SUPER_ADMIN:
            - ROLE_ADMIN
            - ROLE_USER

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: '^/login/2fa', roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
